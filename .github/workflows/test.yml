name: Test Nixpacks Build

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test-nixpack:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install the project
        run: PDM_BUILD_SCM_VERSION=1.0.0 uv sync --all-extras --all-groups

      - name: Run tests
        run: |
          mkdir -p htmldoc/nixpack_template
          uv run pytest
          uv run pdoc --html --force --config latex_math=True -o htmldoc nixpack_template
          uv run coverage html -d htmldoc/coverage --rcfile tests/coverage.conf
          uv run coverage xml -o htmldoc/coverage/coverage.xml --rcfile tests/coverage.conf
          uv run docstr-coverage src/nixpack_template -miP -sp -is -idel --skip-file-doc --badge=htmldoc/nixpack_template/doc_badge.svg || echo ""
          uv run genbadge coverage -l -i htmldoc/coverage/coverage.xml -o htmldoc/nixpack_template/cov_badge.svg

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: 'htmldoc'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # Install nixpacks (via cargo)
      - name: Install Nixpacks
        run: |
          curl -fsSL https://nixpacks.com/install.sh | bash
          nixpacks --version

      # Build Docker image with Nixpacks
      - name: Build image
        run: |
          nixpacks build . -t myapp:latest

      # Run tests inside the container
      - name: Run tests
        run: |
          docker run --rm  myapp sh -c "curl localhost:3000"
